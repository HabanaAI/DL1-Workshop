diff --git a/PyTorch/computer_vision/classification/torchvision/train.py b/PyTorch/computer_vision/classification/torchvision/train.py
index 2d3d993..5e2eb28 100644
--- a/PyTorch/computer_vision/classification/torchvision/train.py
+++ b/PyTorch/computer_vision/classification/torchvision/train.py
@@ -156,14 +156,18 @@ def load_data(traindir, valdir, cache_dataset, distributed):
         print("Loading dataset_train from {}".format(cache_path))
         dataset, _ = torch.load(cache_path)
     else:
-        dataset = torchvision.datasets.ImageFolder(
-            traindir,
-            transforms.Compose([
-                transforms.RandomResizedCrop(224),
+#         dataset = torchvision.datasets.ImageFolder(
+#             traindir,
+#             transforms.Compose([
+#                 transforms.RandomResizedCrop(224),
+#                 transforms.RandomHorizontalFlip(),
+#                 transforms.ToTensor(),
+#                 normalize,
+#             ]))
+        dataset = torchvision.datasets.FakeData(transform=transforms.Compose([transforms.RandomResizedCrop(224),
                 transforms.RandomHorizontalFlip(),
                 transforms.ToTensor(),
-                normalize,
-            ]))
+                normalize,]))
         if cache_dataset:
             print("Saving dataset_train to {}".format(cache_path))
             utils.mkdir(os.path.dirname(cache_path))
@@ -177,14 +181,18 @@ def load_data(traindir, valdir, cache_dataset, distributed):
         print("Loading dataset_test from {}".format(cache_path))
         dataset_test, _ = torch.load(cache_path)
     else:
-        dataset_test = torchvision.datasets.ImageFolder(
-            valdir,
-            transforms.Compose([
-                transforms.Resize(256),
+#         dataset_test = torchvision.datasets.ImageFolder(
+#             valdir,
+#             transforms.Compose([
+#                 transforms.Resize(256),
+#                 transforms.CenterCrop(224),
+#                 transforms.ToTensor(),
+#                 normalize,
+#             ]))
+        dataset_test = torchvision.datasets.FakeData(transform=transforms.Compose([transforms.Resize(256),
                 transforms.CenterCrop(224),
                 transforms.ToTensor(),
-                normalize,
-            ]))
+                normalize,]))
         if cache_dataset:
             print("Saving dataset_test to {}".format(cache_path))
             utils.mkdir(os.path.dirname(cache_path))
@@ -436,8 +444,8 @@ def main(args):
                 device, epoch, print_freq=args.print_freq, apex=args.apex)
         if lr_scheduler is not None:
             lr_scheduler.step()
-        evaluate(model_for_eval, criterion, data_loader_test, device=device,
-                print_freq=args.print_freq)
+#         evaluate(model_for_eval, criterion, data_loader_test, device=device,
+#                 print_freq=args.print_freq)
 
         if (args.output_dir and args.save_checkpoint):
             if args.device == 'hpu':
