diff --git a/PyTorch/computer_vision/classification/torchvision/train.py b/PyTorch/computer_vision/classification/torchvision/train.py
index b81f77c..bf7afba 100644
--- a/PyTorch/computer_vision/classification/torchvision/train.py
+++ b/PyTorch/computer_vision/classification/torchvision/train.py
@@ -140,14 +140,18 @@ def load_data(traindir, valdir, cache_dataset, distributed):
         print("Loading dataset_train from {}".format(cache_path))
         dataset, _ = torch.load(cache_path)
     else:
-        dataset = torchvision.datasets.ImageFolder(
-            traindir,
-            transforms.Compose([
-                transforms.RandomResizedCrop(224),
-                transforms.RandomHorizontalFlip(),
-                transforms.ToTensor(),
-                normalize,
-            ]))
+        #dataset = torchvision.datasets.ImageFolder(
+        #    traindir,
+        #    transforms.Compose([
+        #        transforms.RandomResizedCrop(224),
+        #        transforms.RandomHorizontalFlip(),
+        #        transforms.ToTensor(),
+        #        normalize,
+        #    ]))
+        dataset = torchvision.datasets.FakeData(transform=transforms.Compose([transforms.RandomResizedCrop(224),
+                  transforms.RandomHorizontalFlip(),
+                  transforms.ToTensor(),
+                  normalize,]))
         if cache_dataset:
             print("Saving dataset_train to {}".format(cache_path))
             utils.mkdir(os.path.dirname(cache_path))
@@ -161,14 +165,18 @@ def load_data(traindir, valdir, cache_dataset, distributed):
         print("Loading dataset_test from {}".format(cache_path))
         dataset_test, _ = torch.load(cache_path)
     else:
-        dataset_test = torchvision.datasets.ImageFolder(
-            valdir,
-            transforms.Compose([
-                transforms.Resize(256),
-                transforms.CenterCrop(224),
-                transforms.ToTensor(),
-                normalize,
-            ]))
+        #dataset_test = torchvision.datasets.ImageFolder(
+        #    valdir,
+        #    transforms.Compose([
+        #        transforms.Resize(256),
+        #        transforms.CenterCrop(224),
+        #        transforms.ToTensor(),
+        #        normalize,
+        #    ]))
+        dataset_test = torchvision.datasets.FakeData(transform=transforms.Compose([transforms.Resize(256),
+                 transforms.CenterCrop(224),
+                 transforms.ToTensor(),
+                 normalize,]))
         if cache_dataset:
             print("Saving dataset_test to {}".format(cache_path))
             utils.mkdir(os.path.dirname(cache_path))
@@ -362,8 +370,10 @@ def main(args):
                 device, epoch, print_freq=args.print_freq, apex=args.apex)
         if lr_scheduler is not None:
             lr_scheduler.step()
+        '''
         evaluate(model_for_eval, criterion, data_loader_test, device=device,
                 print_freq=args.print_freq)
+        '''
 
         if (args.output_dir and args.save_checkpoint):
             if args.device == 'hpu':
