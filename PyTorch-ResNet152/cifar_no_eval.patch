diff --git a/PyTorch/computer_vision/classification/torchvision/train.py b/PyTorch/computer_vision/classification/torchvision/train.py
index 159d26c..47c8120 100644
--- a/PyTorch/computer_vision/classification/torchvision/train.py
+++ b/PyTorch/computer_vision/classification/torchvision/train.py
@@ -148,14 +148,19 @@ def load_data(traindir, valdir, cache_dataset, distributed):
         print("Loading dataset_train from {}".format(cache_path))
         dataset, _ = torch.load(cache_path)
     else:
-        dataset = torchvision.datasets.ImageFolder(
-            traindir,
-            transforms.Compose([
-                transforms.RandomResizedCrop(224),
-                transforms.RandomHorizontalFlip(),
-                transforms.ToTensor(),
-                normalize,
-            ]))
+        #dataset = torchvision.datasets.ImageFolder(
+        #    traindir,
+        #    transforms.Compose([
+        #        transforms.RandomResizedCrop(224),
+        #        transforms.RandomHorizontalFlip(),
+        #        transforms.ToTensor(),
+        #        normalize,
+        #    ]))
+        dataset = torchvision.datasets.CIFAR10(root=traindir, train=True,
+                                        download=True,
+                                        transform=transforms.Compose(
+                                                        [transforms.ToTensor(),
+                                                        transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))
         if cache_dataset:
             print("Saving dataset_train to {}".format(cache_path))
             utils.mkdir(os.path.dirname(cache_path))
@@ -169,14 +174,19 @@ def load_data(traindir, valdir, cache_dataset, distributed):
         print("Loading dataset_test from {}".format(cache_path))
         dataset_test, _ = torch.load(cache_path)
     else:
-        dataset_test = torchvision.datasets.ImageFolder(
-            valdir,
-            transforms.Compose([
-                transforms.Resize(256),
-                transforms.CenterCrop(224),
-                transforms.ToTensor(),
-                normalize,
-            ]))
+        #dataset_test = torchvision.datasets.ImageFolder(
+        #    valdir,
+        #    transforms.Compose([
+        #        transforms.Resize(256),
+        #        transforms.CenterCrop(224),
+        #        transforms.ToTensor(),
+        #        normalize,
+        #    ]))
+        dataset_test = torchvision.datasets.CIFAR10(root=valdir, train=False,
+                                                download=True,
+                                                transform=transforms.Compose(
+                                                    [transforms.ToTensor(),
+                                                    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))
         if cache_dataset:
             print("Saving dataset_test to {}".format(cache_path))
             utils.mkdir(os.path.dirname(cache_path))
@@ -414,8 +424,8 @@ def main(args):
         train_one_epoch(lr_scheduler, model_for_train, criterion, optimizer, data_loader,
                 device, epoch, print_freq=args.print_freq, apex=args.apex)
         if epoch == next_eval_epoch:
-            evaluate(model_for_eval, criterion, data_loader_test, device=device,
-                    print_freq=args.print_freq)
+            #evaluate(model_for_eval, criterion, data_loader_test, device=device,
+            #        print_freq=args.print_freq)
             next_eval_epoch += args.epochs_between_evals
 
         if (args.output_dir and args.save_checkpoint):
